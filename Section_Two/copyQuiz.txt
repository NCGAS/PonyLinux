What does cp with the -i flag do?	2	It copies interactively.	While the -i flag can often mean interactive in some commands, for cp it means to ask before overwriting a file during the copy.	It means to copy with the input being what is after -i and the output being what's after that.	Not quite - cp already assumes you will give it input (or source) and output (or destination), so the -i flag isn't necessary. It means to ask before overwriting a file during the copy.	It means to ask before overwriting a file during the copy.	The -i flag is a safeguard so that if you copy a file to a place that already has a file with that name, it won't overwrite the existing file.	It means to copy and paste at the same time.	The copy command already does a copy and paste, without the -i flag being needed. -i means to ask before overwriting a file during the copy.
How do I copy a file called 'poundcake.txt' into the directory above my current one?	1	cp -R poundcake.txt recipes/	This isn't correct because it will copy the poundcake file into a subdirectory called recipes, not into the parent directory. In addition, the use of -R doesn't really make sense since we are copying a file and not a directory, so there is no need for recursion.	cp poundcake.txt ../	The ../ refers to the parent directory. Good job!	cp ../ poundcake.txt	Close, but the file or folder you are copying has to come first in the order, followed by where you want to copy it to. This is switched around.	cp ../poundcake.txt .	This is a valid command, but it would look for the file called poundcake.txt in the parent directory and try to copy it into our current one. This is different from copying from our current directory to the parent, so it's a little switched around from what it should be.
Which of the following will not return an error? (Assume permissions are allowed):	1	cp recipes ../	This will fail because you can't copy a directory without the -R flag.	cp -R recipes ..	You can copy the recipes folder into the parent directory with no issue, assuming permissions allow it.	cp -R recipes/ poundcake.txt	You can't copy a directory into a file, even if -i is not on.	cp -R recipes recipes/	You will get into trouble if you try to put a folder infinitely inside itself =)	cp poundcake.txt ./poundcake.txt	Even though we added a hint to use the current directory (./) in the destination, it still resolves to exactly the same spot and will throw an error.	All of the above.	The second option, cp -R recipes .., will not throw an error as long as permissions allow.
My current directory is /home/pinkiepie. Which of the following are NOT equivalent to 'cp recipes/cookies.txt' ../rdash	2	cp recipes/cookies.txt /home/rdash/	The relative path, ../, can be freely swapped for the full path of /home.	cp ./recipes/cookies.txt /home/rdash	I used a ./ at the beginning and no / at the end of this one, but the ./ just means my current folder and the / at the end is optional, so this is equivalent.	cp /home/rdash/cookies.txt ./recipes/cookies.txt	This is not equivalent because the source is now rdash's cookies.txt file, and the destination is in my recipes folder. I've reversed the direction of the copy.	cp /home/pinkiepie/recipes/cookies.txt ../rdash/cookies.txt	I can always specify my full path, which is equivalent to my relative path to recipes/cookies.txt. The cp command will fill in the name cookies.txt if the destination is a directory, but I can also state it explicitly here.
How do I copy all of the text files (.txt) from my recipe folder into my friend's folder?	0	cp recipes/*.txt /home/rdash/	The * before the text is all I need to grab the right files.	cp recipes* .txt /home/rdash/	If you look real hard, you will notice a few things wrong here. I have a space between recipes and .txt, and the * is attached to the end of the word recipes. This will really confuse bash.	cp -R recipes/.txt* /home/rdash	The -R flag won't do anything here, since we are getting a list of files and not trying to delve into subdirectories. The * is after the .txt so this will look for files that start with .txt, not end with it, which is pretty unlikely.
