Copy

Files and folders can be copied using the cp command in Unix. You may be used to copying and pasting as two separate actions, or as a drag-and-drop action with your mouse; in Unix you specify both what you want to copy and then where to put it. You cant put files into the "clipboard" the same way you would do on other systems. 
The item to be copied can be referred to as the "source", and the place to put it can be called the "destination". You will see these terms when copying files across two different computers too.
One important thing to know about copying files is that by default, Unix will overwrite a file if you copy it to a name that already exists. What's worse, it won't ask you first, it'll just clobber your file! Many systems recognize how destructive this can be, and turn on the -i flag for you. If you do cp -i file1 where_to_put_file1, and there is already a file called where_to_put_file1, it will ask you if you are sure you want to overwrite it.
The opposite of the -i flag is the -f flag, which forces cp to overwrite files. Since this is the default behavior, the -f flag only does something when combined with something like -i, which asks, or -n, which assumes to never overwrite. 
So what happens if I say both -i and -f? Which one wins? Let's find out!

(have them try different copy commands with -i, -n, and f in different orders).

Your system may have the -i flag on with copy by default. You can find out what overrides are in place by running the alias command. Take a look:
(have them type alias)
(print out the results of alias)
This might look a little hard to read, but think of it like what is before the equals sign (=) is being automatically changed to what is after the equals sign. We will talk about how to set these aliases in another lesson in more detail, but for now you can check and see if cp is listed. Other common aliases are rm to rm -i, mv to mv -i, and modifications of ls to change the default output.

If you remember the ls command from Section One, there were different ways of referring to a directory or file you wanted to list. You can specify the full path starting with the root directory (/), or you can give directions to the path relative to where you currently are. The same concept applies to the cp command. I can copy a file into the directory above me. Try it:
cp filename ../
I can copy a file from the root directory into my current directory like so. Try it:
cp /etc/profile .

Did you notice that in both the exercises we just did, the destination was a directory? Bash assumes that if you copy a file and give a directory name as the destination, it will put your file inside the new directory and keep the file's name the same. You don't have to worry about copy replacing a directory with a file. You can use a / at the end of the directory name if you like. 
So if I have a file called apple_pie.txt in my current directory, and I want to copy it into recipes, then the following commands are exactly equivalent:
cp apple_pie.txt recipes
cp apple_pie.txt recipes/
cp apple_pie.txt recipes/apple_pie.txt

If I wanted to really confuse my friends, I could copy the file and change the file's name to sugar_cream_pie.txt at the same time:
cp apple_pie.txt recipes/sugar_cream_pie.txt

Be warned that you can't create directories along the way. If there is no directory in recipes called favorites, then I can't do the following:
cp apple_pie recipes/favorites/apple_pie.txt

We will get into creating directories in Section Three. So far we've talked about how to copy a file, but what about multiple files? Just as in ls, we can use special characters to copy multiple files at once. For example, if I wanted to copy all the files from recipes into a friend's recipe folder, I could use the star/asterisk/*/wildcard character:
cp recipes/* /home/applejack/recipes

I can also use the star in the middle of words. How would I copy only recipes that start with the word 'apple' into applejack's recipe folder?
getInput "use the wildcard to copy files that start with apple from recipes into /home/applejack/recipes" "Keep trying" "cp recipes/apple* /home/applejack/recipes"

Great work! I know that's a lot, but there's one more thing we have to talk about - directories. You can't just copy a directory into another place, because it contains other things. Try this:
cp recipes /home/rdash
cp: recipes is a directory (not copied).

In order to copy a directory, you have to use the -R flag. That's a capital R! It stands for recursive, which is just a fancy way of saying to keep copying subdirectories and the subdirectories of the subdirectories and the... you know what I mean. Keep going until you have copied all the stuff that is in that directory. You can also think of recursion another way. Say you want to meet new people - you start out meeting your friend's friends. Then you might meet their friends. If you keep at it, you will end up knowing everyone in the world! Now you try it.

getInput "How would I copy my recipes folder into my friend's home directory, /home/rdash?" "You need to try adding the recursion flag, -R" "cp -R recipes /home/rdash"

Even when you copy a directory using the -R flag, note that you can't replace a file with a directory. The following will give you an error:
cp -R recipes apple_pie.txt
Another problem would be trying to recursively copy a directory into itself! You will make bash puke!
cp -R recipes recipes
cp: recipes/recipes/recipes/.../recipes/recipes: name too long (not copied)
No copying a file into itself, either:
cp: apple_pie and apple_pie.txt are identical (not copied).


Next we'll talk about moving files, which is a cut and paste style of operation instead of a copy and paste.

quiz questions

quiz "What does cp with the -i flag do?" 2 "It copies interactively." "While the -i flag can often mean interactive in some commands, for cp it means to ask before overwriting a file during the copy." "It means to copy with the input being what is after -i and the output being what's after that." "Not quite - cp already assumes you will give it input (or source) and output (or destination), so the -i flag isn't necessary. It means to ask before overwriting a file during the copy." "It means to ask before overwriting a file during the copy." "The -i flag is a safeguard so that if you copy a file to a place that already has a file with that name, it won't overwrite the existing file." "It means to copy and paste at the same time." "The copy command already does a copy and paste, without the -i flag being needed. -i means to ask before overwriting a file during the copy." 

quiz "How do I copy a file called 'poundcake.txt' into the directory above my current one?" 1 "cp -R poundcake.txt recipes/" "This isn't correct because it will copy the poundcake file into a subdirectory called recipes, not into the parent directory. In addition, the use of -R doesn't really make sense since we are copying a file and not a directory, so there is no need for recursion." "cp poundcake.txt ../" "The ../ refers to the parent directory. Good job!" "cp ../ poundcake.txt" "Close, but the file or folder you are copying has to come first in the order, followed by where you want to copy it to. This is switched around." "cp ../poundcake.txt ." "This is a valid command, but it would look for the file called poundcake.txt in the parent directory and try to copy it into our current one. This is different from copying from our current directory to the parent, so it's a little switched around from what it should be." 

quiz "Which of the following will not return an error? (Assume permissions are allowed): " 1 "cp recipes ../" "This will fail because you can't copy a directory without the -R flag." "cp -R recipes .." "You can copy the recipes folder into the parent directory with no issue, assuming permissions allow it."  "cp -R recipes/ poundcake.txt" "You can't copy a directory into a file, even if -i is not on." "cp -R recipes recipes/" "You will get into trouble if you try to put a folder infinitely inside itself =) " "cp poundcake.txt ./poundcake.txt" "Even though we added a hint to use the current directory (./) in the destination, it still resolves to exactly the same spot and will throw an error." "All of the above." "The second option, cp -R recipes .., will not throw an error as long as permissions allow."

quiz "My current directory is /home/pinkiepie. Which of the following are NOT equivalent to 'cp recipes/cookies.txt ../rdash" 2 "cp recipes/cookies.txt /home/rdash/" "The relative path, ../, can be freely swapped for the full path of /home." "cp ./recipes/cookies.txt /home/rdash" "I used a ./ at the beginning and no / at the end of this one, but the ./ just means my current folder and the / at the end is optional, so this is equivalent." "cp /home/rdash/cookies.txt ./recipes/cookies.txt " "This is not equivalent because the source is now rdash's cookies.txt file, and the destination is in my recipes folder. I've reversed the direction of the copy." "cp /home/pinkiepie/recipes/cookies.txt ../rdash/cookies.txt" "I can always specify my full path, which is equivalent to my relative path to recipes/cookies.txt. The cp command will fill in the name cookies.txt if the destination is a directory, but I can also state it explicitly here." 

quiz "How do I copy all of the text files (.txt) from my recipe folder into my friend's folder?" 0 "cp recipes/*.txt /home/rdash/" "The * before the text is all I need to grab the right files." "cp recipes* .txt /home/rdash/" "If you look real hard, you will notice a few things wrong here. I have a space between recipes and .txt, and the * is attached to the end of the word recipes. This will really confuse bash." "cp -R recipes/.txt* /home/rdash" "The -R flag won't do anything here, since we are getting a list of files and not trying to delve into subdirectories. The * is after the .txt so this will look for files that start with .txt, not end with it, which is pretty unlikely."