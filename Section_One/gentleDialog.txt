ponygo fluttershyshy "Oh, hello there. I will try to introduce you to this Unix and bash thing as gently as possible."
ponygo fluttershy "Let's start with the basic way you interact with the computer. You might be used to a screen with pictures and icons, with nice things like mouse access and menus and sounds.${n2}It might be hard to get used to doing things with just text."
ponygo fluttershy "There are advantages, too! For instance, the actions that you define with commands can scale really well.${n2}You can do things to one file or a thousand files with ease. You can string commands together one after another, find things quickly, rename lots of files, move things around, and encode decision-making logic. You control and can customize your computing experience limited only by your imagination and coding skills."
ponygo fluttershy "What you are looking at now is called a shell - it's a program that lets you interact with the underlying computer operating system.${n2}The specific shell you are using is called Bash, and it has its own kind of language. You issue commands to the bash shell and it executes those commands."
ponygo fluttershystare "When you first invoke Bash, you may see a line with your name and other text, followed by a ${b}\$${r} or a ${b}#${r} character. This line is called a prompt, because it is prompting you to tell it what to do."
ponygo fluttershy "You issue commands to the shell by typing them out and hitting enter.${n2}This is important - the first thing that you type after the prompt must be a command. Unix is very picky about order, capitalization, spaces, and punctuation."
ponygo fluttershyshy "For example, there is a command called ${b}ls${r}, which lists information about a file or directory."; echo "Just typing ${b}ls${r} and hitting enter yields:"; ls | head -n 5
ponygo fluttershygala "You can change the exact behavior of the command by adding more things to it. These extra words are called parameters, arguments, or flags.${n2}These can override the default behavior of the command; for example, ${b}ls${r} by itself gives you the contents of the directory that you are currently in.${n2}More on directories later, but if I wanted to know information about a specific file or directory, I could put its name after ${b}ls${r}, with a space in between."
ponygo fluttershy "For example, let's look at what is in the very top directory${n}(denoted by ${b}/${r}:"; echo "${b}ls /${r}"; ls / | head -n 5
ponygo fluttershybat "So we gave ${b}/${r} as an argument to the ${b}ls${r} command. Now, we can change it even further by adding parameters. If we want ${b}ls${r} to give more information than just the contents of the directory, we could add a parameter called ${b}long${r}."
ponygo fluttershystare "But we can't just say ${b}ls long /${r}. Then ${b}ls${r} would not be sure if ${b}long${r} was a directory name or an argument. There's nothing to stop you from naming directories whatever you want, even command names or parameter names.${n2}To make sure ${b}ls${r} knows to print a long format, we put dashes in the command. We will use the short form for ${b}long${r}, which is just ${b}-l${r}."; echo "${b}ls -l /${r}"; ls -l / | head -n 5 #echo ... # If I was using tail instead of head, you could put this here 
ponygo fluttershygala "Because a single dash is understood to be a single-letter form of a parameter, you can put multiple ones together. If I type in ${b}ls -lah${r}, this is the same as typing ${b}ls -l -a -h${r}. It does not mean that \"lah\" is a word, and it is not the same as ${b}ls --lah.${r}"; echo ${b}ls -lah /${r}; ls -lah / | head -n 5
ponygo fluttershyshy "Great, that's all you need to know about the structure of commands! Now here are some general tips and tricks you should know before you get started."
ponygo fluttershystare "Many commands don't seem to do anything after you enter them. A lack of output is usually a good sign in Unix! If a command fails, it usually tells you."
ponygo fluttershy "The up arrow key allows you to see commands you entered before! Keep hitting up to walk backward through your command history."
ponygo fluttershygala "The control key does special things in Unix. If you hold down the control (ctrl) key and tap the letter \"r\" at the same time, a handy prompt will come up that lets you search your history for the most recent commands that match what you type in the search. We refer to this key combination as ${b}ctrl+r${r}."
ponygo fluttershybat "If you hit ctrl and the c key at the same time, it will quit most programs (press the q key if ${b}ctrl+c${r} doesn't work). You can also use ${b}ctrl+c${r} if you make a mistake while typing a command as a faster way to cancel the command rather than pressing backspace."
ponygo fluttershy "Other keyboard shortcuts you might use are:${nt}${b}ctrl+a${r} to go to the beginning of the line;${nt}${b}ctrl+e${r} to go to the end of the line;${nt}${b}escape+>${r} to go to the end of a document;${nt}${b}escape+<${r} to go to the beginning of a document;${nt}${b}ctrl+d${r} to log out of your current Bash session." 
ponygo fluttershy "In addition to the up arrow key, the tab key will also save you a ton of typing. Use tab to complete a command or to fill in the rest of a file name. Hit tab twice in a row quickly to see your completion options."
ponygo fluttershy "For example, if I had two files, one named ${b}verylongfilename.txt${r} and the other named ${b}veryshort.txt${r}, I could type in ${b}ls v${r} and then hit tab. This would fill in ${b}very${r} and then wait for me to enter the next character."
ponygo fluttershyshy "There are two files that start with ${b}very${r}, so Unix is now waiting to see which one you want to run with the ${b}ls${r} command.${n2}If you hit tab twice, it will show you both files that start with ${b}very${r}."
ponygo fluttershy "If you type ${b}ls veryl${r}, the tab key would fill in the whole file:${n}${b}verylongfilename.txt${r}.${n2}This is also a good way to avoid spelling mistakes, and to make sure that the file or command exists where Unix is looking."
ponygo pinkiehugfluttershy "I think with that, you are ready to learn more about navigating from my friend.."
ponygo pinkiehugsfluttershy "Oof.";echo "gentletutdone: (Done)" >> ~/.unixTut/config
