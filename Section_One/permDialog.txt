ponygo applejackscarecrow "Howdy, $PONYUSER. Let's talk about users and permissions in Unix while we head over to the castle.${n2}We'll grab some supplies - like food!  Can't have you fight on an empty stomach!"
ponygo applejackscarecrow "While we walk to the castle, let's talk about users and groups in our pony herd.  There are three levels of users for each file in Unix Permissions - the owner (also called user), the group, and others.  The owner is usually who made the file, groups are defined sets of users, and other is everyone else!"
ponygo applejack "My name is Applejack, but my username, applejack, is what gets used for files and directories I own. So, while your name is $PONYUSER, the system may call you something else (how rude!). You can do this by asking \"who am I\" all run together-like: ${b}whoami${r}.${n2}Go ahead and ask the computer an existential question!";    getInput 'whoami' 'Try again!';    whoami
ponygo applejack-63 "What about groups?  I belong to the ponies group and I'm also in the bookclub group.${n2}You can belong to several groups, just like I do. What groups do you belong to? Use the ${b}id${r} command to find out! The id command shows the user and group names and numeric IDs.";    getInput 'id' 'Try again!';  echo "Good job! This lists the user id (uid), your default group (gid), and all other groups you are in (i.e. ponies!)"; id
ponygo applejack "We made you an honorary pony for helping us, so you will see the ponies group in your ids!  Oh look, there's the castle!"
ponygo applejack-63 "Now that the Princess is missing, we are keeping the castle locked. We'll need to make sure we have ${b}permission${r} to enter.${n2}Unix permissions control who can access files and directories. Let's check to see who has permission to access the castle - try using the command: ls -l"; getInput 'ls -l' "Don't give up! Did you remember the ${b}dash?${r}";    echo "total 12K";    echo "drwxrwxr-x 3 $USER $USER 4.0K Aug  9 12:25 .";    echo "drwxrwxr-x 3 $USER $USER 4.0K Aug  9 12:25 ..";    echo "drwxrwx--- 2 princess ponies 4.0K Aug  9 12:25 castle";    echo "Good job!"
ponygo applejack "So what does all this mean? That first part of each line: \n\ndrwxrwx---\n\nis the permission code.  Let's look at the different parts of the code separately. \n\nWe can write the code in a more readable way:\n\nd rwx rwx ---\n\nThe first part means the castle is a Directory, but what about the three sets after?"
ponygo applejack "In each of the three sections, there are three letters: ${b}rwx${r}.${n2}The letter ${b}r${r} stands for read, ${b}w${r} stands for write, and ${b}x${r} stands for execute. A ${b}dash${r} (${b}-${r}) can stand in as a lack of permission for r, w, or x."
ponygo applejack-63 "To see the name of a file inside a directory requires read permissions of the ${b}directory${r}. Reading what is inside a file requires read permissions of the ${b}file${r}."
ponygo applejackscarecrow "Write permissions allow you to modify the ${b}contents${r} of the item.${n2}Changing the name of a file requires write permissions for the the ${b}directory${r} it's in!${n2}The enclosing directory has the line ending with one dot:${n2}${b}drwxrwxr-x 3 $USER $USER 4.0K Aug  9 12:25 .${r}"
ponygo applejackscarecrow "To change the contents inside a file, though, you just need write permissions to the file. This is one permission to watch closely!  With great write power, comes great responsibility - to not destroy another pony's data!"
ponygo applejack "Execute permission on directories means that you can enter the directory and access its contents.${n2}For files, think of ${b}x${r} permissions as making the file into a program, like an .exe file in Windows or a .dmg file on Mac. Most files don't need execute permissions."
ponygo applejack-63 "Okay, now we know r, w, and x - But why three sets? There's one for each level - user, group, and other!"
ponygo applejack "So who owns this castle and what group they are in? What permissions does each group have?  It's all in the output of ls -l! Let's look at that again, try the ls command with the correct option to see permissions"; getInput 'ls -l' "Did you remember the space before the -? Try again!";        echo "total 12K";    echo "drwxrwxr-x 3 $USER $USER 4.0K Aug  9 12:25 .";    echo "drwxrwxr-x 3 $USER $USER 4.0K Aug  9 12:25 ..";    echo "drwxrwx--- 2 princess ponies 4.0K Aug  9 12:25 castle";    echo "Good job!"
ponygo applejack "drwxrwx--- 2 ${b}princess ponies${r} 4.0K Aug  9 12:25 castle${n2}The owner of the castle (the Princess!) can read, write, and execute (${b}rwx${r}).${n2}Anyone in the ponies group can do the same. ${n2}Everyone not in the ponies group is an other and is locked out (${b}---${r}) until this crisis is over!"
ponygo applejack-63 "Thankfully, we're both ponies now, so we can enter the castle without making the guards angry.  Let's explore the castle a bit while we talk about how to ${b}change permissions${r}.  cd into the castle to enter!";  getInput 'cd castle' "You can get through that door, I know you can! Try again!";    echo "Great job!"
ponygo applejack "Let's have a look around! Use ${b}ls -l${r} to see what is in the castle and where we're allowed to go.";    getInput 'ls -l' 'Try again!';    echo "total 20K";    echo "drwxrwx--- 2 princess ponies 4.0K Aug  9 12:25 .";    echo "drwxrwxr-x 3 $USER $USER 4.0K Aug  9 12:25 ..";    echo "drwxrwx--- 3 princess ponies 4.0K Aug 9 12:25 kitchen";    echo "drwxrwx--- 3 princess guards 4.0K Aug 9 12:25 armory";    echo "drwx------ 3 princess princess 4.0K Aug 9 12:25 royal_quarters"
ponygo fillyjack "Well, we can't go into the Royal Quarters - only the Princess can:${n2}${b}drwx------ 3 princess princess 4.0K Aug 9 12:25 royal_quarters${r}${n2}Nor can we go to the armory, since that is owned by the princess and only open to the guards:${n2}${b}drwxrwx--- 3 princess guards 4.0K Aug 9 12:25 armory${r}${n2}Let's go into the kitchen to grab some grub to fuel our adventure!"
ponygo fillyjack "Okay, what's in this kitchen? I'll do the ls -l this time!";    echo "total 14K";    echo "drwxrwx--- 2 princess ponies 4.0K Aug  9 12:25 .";    echo "drwxrwx--- 3 princess ponies 4.0K Aug  9 12:25 ..";    echo "-rw-rw---- 3 applejack ponies 2.0K Aug 9 12:25 apples";    echo "-rw-rw---- 3 applejack ponies 2.0K Aug 9 12:25 candies";    echo "-rw------- 3 $USER ponies 2.0K Aug 9 12:25 travelpack"
ponygo fillyjacktravel "I see you brought your travelpack with you:${n2} ${b}-rw------- 3 $USER ponies 2.0K Aug 9 12:25 travelpack${r} ${b} ${n2}-rw-rw---- 3 applejack ponies 2.0K Aug 9 12:25 apples ${n2}-rw-rw---- 3 applejack ponies 2.0K Aug 9 12:25 candies${r} ${n2} I also have my stash of apples and candies I share with the ponies group!"
ponygo fillyjacktravel "Keep in mind anyone with ${b}w${r}rite permissions to your files can change your files.${n2}${b}-rw------- 3 $USER ponies 2.0K Aug 9 12:25 travelpack${r}${n2}Right now, only you can change your travelpack, since you own it and have ${b}rw${r}, and all other permissions are ${b}-${r}. To allow your groupmates to help you out, we should let them add to your travelpack with read and write permissions."
ponygo fillyjack "To change the permissions, we use a command called ${b}chmod${r} (change mode). The command needs to know what new permissions you want and what file or directory you want to apply the new permissions to. The command looks like this:${n2}${b}chmod g+rw travelpack${r}. ${n2}Give it a try!";    getInput 'chmod g+rw travelpack' 'Try again!'; echo "Good job!";
ponygo fillyjack "We used ${b}g+rw${r} to allow the ${b}group${r} to ${b}read${r} and ${b}write${r} to your travelpack. Since Rainbow Dash has been eating all the candies, let's put a lock on this tin! You can revoke permissions the same way using a minus sign instead of a plus sign, like:${n2}${b}chmod a-x candies${r}${n2}Here I used ${b}a${r} as a shorthand for \"all\", but you could have also done the equivalent:${n2}${b}chmod ugo-x candies${r} ${n2}I'll do this one, since I own the food, and only owners can change the permissions."
ponygo fillyjacktravel "Always double check that it did what you intended. Let's see the new permissions:";    echo "total 14K";    echo "drwxrwx--- 2 princess ponies 4.0K Aug  9 12:25 .";    echo "drwxrwx--- 3 princess ponies 4.0K Aug  9 12:25 ..";    echo "-rw-rw---- 3 applejack applejack 2.0K Aug 9 12:25 apples";    echo "-rw------- 3 applejack applejack 2.0K Aug 9 12:25 candies";    echo "-rw-${b}rw-${r}--- 3 $USER ponies 2.0K Aug 9 12:25 travelpack"
ponygo applejack "Alrighty $PONYUSER, now you know how to change who can access your files, and that you have access to apples (they boost health!).  If you see an error like ${b}permission denied${r}, check the permissions with ${b}ls -l${r} and change them with ${b}chmod${r}.";    echo "permtutdone: (Done)" >> ~/.ponylinux/config
